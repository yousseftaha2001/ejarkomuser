/// Generated by Flutter GetX Starter on 2022-10-18 23:47
import 'package:ejarkom/app/Ads/create_ads/widgets/my_from_feild.dart';
import 'package:ejarkom/app/BuildsRequest/add_build_manage/widgets/build_selector.dart';
import 'package:ejarkom/app/BuildsRequest/add_build_manage/widgets/city_selector.dart';
import 'package:ejarkom/app/BuildsRequest/add_build_manage/widgets/zone_selector.dart';
import 'package:ejarkom/utils/widgets/my_indicator.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:smooth_page_indicator/smooth_page_indicator.dart';

import 'add_build_manage_logic.dart';
import 'add_build_manage_state.dart';

class AddBuildManageView extends StatefulWidget {
  @override
  _AddBuildManageViewState createState() => _AddBuildManageViewState();
}

class _AddBuildManageViewState extends State<AddBuildManageView> {
  final AddBuildManageLogic logic = Get.put(AddBuildManageLogic());
  final AddBuildManageState state = Get.find<AddBuildManageLogic>().state;

  @override
  void dispose() {
    Get.delete<AddBuildManageLogic>();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          onPressed: () {
            Get.back();
          },
          icon: Icon(
            Icons.arrow_back_ios,
            color: Get.theme.primaryColor,
          ),
        ),
        title: Text(
          'Management Request'.tr,
          style: Get.textTheme.bodyText1!.copyWith(
            fontSize: 40.sp,
            color: Get.theme.primaryColor,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          image: DecorationImage(
            image: AssetImage('assets/images/newb.png'),
            fit: BoxFit.fitHeight,
          ),
        ),
        height: Get.height,
        child: Padding(
          padding: EdgeInsets.symmetric(horizontal: 15.w),
          child: SingleChildScrollView(
            child: Column(
              children: [
                SizedBox(height: 10.h),
                Container(
                  width: Get.width,
                  height: 400.h,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(8.sp),
                    border: Border.all(
                      color: Colors.grey.withOpacity(0.5),
                    ),
                  ),
                  child: GetBuilder<AddBuildManageLogic>(
                    id: 'photo',
                    builder: (logic) {
                      return state.images.isNotEmpty
                          ? Stack(
                              children: [
                                Center(
                                  child: Column(
                                    children: [
                                      SizedBox(
                                        height: 260.h,
                                        width: Get.width,
                                        child: PageView.builder(
                                          itemBuilder: (context, index) {
                                            return Stack(
                                              alignment: Alignment.bottomCenter,
                                              children: [
                                                Image.file(
                                                  state.images[index],
                                                ),
                                                Positioned(
                                                  top: 10.h,
                                                  left: 20.w,
                                                  child: IconButton(
                                                    onPressed: () {
                                                      logic.deleteImage(index);
                                                    },
                                                    icon: const Icon(
                                                      Icons.delete,
                                                      color: Colors.black,
                                                    ),
                                                  ),
                                                ),
                                              ],
                                            );
                                          },
                                          itemCount: state.images.length,
                                          onPageChanged: (value) {
                                            state.cureentIndex.value = value;
                                          },
                                          controller: state.pageController,
                                        ),
                                      ),
                                      SizedBox(height: 10.h),
                                      Obx(
                                        () => AnimatedSmoothIndicator(
                                          activeIndex: state.cureentIndex.value,
                                          count: state.photos.length,
                                          effect: JumpingDotEffect(
                                            activeDotColor:
                                                Get.theme.primaryColor,
                                            dotHeight: 10.h,
                                            dotWidth: 10.h,
                                          ),
                                        ),
                                      )
                                    ],
                                  ),
                                ),
                                Positioned(
                                  top: 250.h,
                                  left: 350.w,
                                  child: IconButton(
                                    onPressed: () {
                                      logic.getImages();
                                    },
                                    icon: Icon(
                                      Icons.add,
                                      color: Colors.black,
                                    ),
                                  ),
                                ),
                              ],
                            )
                          : Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                IconButton(
                                  icon: Icon(Icons.add),
                                  onPressed: () {
                                    logic.getImages();
                                  },
                                ),
                                Text(
                                  'one image at least and five at most'.tr,
                                  style: Get.textTheme.bodyText1,
                                )
                              ],
                            );
                    },
                  ),
                ),
                SizedBox(height: 30.h),
                Form(
                  key: state.formKey,
                  child: Column(
                    children: [
                      MyCustomFormField(
                        controller: state.nameE,
                        hint: 'Name In English'.tr,
                        formK: state.formKey,
                        validator: (String? value) {
                          if (value!.isEmpty) {
                            return 'Please enter Name In English'.tr;
                          } else {
                            return null;
                          }
                        },
                        icon: Icon(Icons.language),
                      ),
                      SizedBox(height: 20.h),
                      MyCustomFormField(
                        controller: state.descriptionE,
                        hint: 'Description In English'.tr,
                        formK: state.formKey,
                        validator: (String? value) {
                          if (value!.isEmpty) {
                            return 'Please enter Description In English'.tr;
                          } else {
                            return null;
                          }
                        },
                        icon: Icon(Icons.description_outlined),
                      ),
                      SizedBox(height: 20.h),
                      MyCustomFormField(
                        controller: state.addressE,
                        hint: 'Address In English'.tr,
                        formK: state.formKey,
                        validator: (String? value) {
                          if (value!.isEmpty) {
                            return 'Please enter Address In English'.tr;
                          } else {
                            return null;
                          }
                        },
                        icon: Icon(Icons.location_on_outlined),
                      ),
                      SizedBox(height: 20.h),
                      MyCustomFormField(
                        controller: state.video,
                        hint: 'video link on youtube'.tr,
                        formK: state.formKey,
                        validator: (String? value) {
                          if (value!.isEmpty) {
                            return 'Please enter video link on youtube'.tr;
                          } else {
                            return null;
                          }
                        },
                        icon: Icon(Icons.video_camera_back_outlined),
                      ),
                      SizedBox(height: 20.h),
                      MyCustomFormField(
                        controller: state.cost,
                        hint: 'Cost'.tr,
                        formK: state.formKey,
                        validator: (String? value) {
                          if (value!.isEmpty) {
                            return 'Please enter Cost'.tr;
                          } else {
                            return null;
                          }
                        },
                        icon: Icon(Icons.money),
                      ),
                      SizedBox(height: 20.h),
                      MyCustomFormField(
                        controller: state.phone,
                        hint: 'Phone'.tr,
                        formK: state.formKey,
                        validator: (String? value) {
                          if (value!.isEmpty) {
                            return 'Please enter Phone'.tr;
                          } else {
                            return null;
                          }
                        },
                        icon: Icon(Icons.phone),
                      ),
                      SizedBox(height: 20.h),
                      Obx(() => state.gettingBuildTypes.value
                          ? MyIndicator()
                          : BuildSelectorM()),
                      SizedBox(height: 20.h),
                      Obx(() => state.gettingCities.value
                          ? MyIndicator()
                          : CitySelectorM()),
                      SizedBox(height: 20.h),
                      GetBuilder<AddBuildManageLogic>(
                        id: 'z',
                        builder: (logic) {
                          return state.selectedCity != null
                              ? Obx(() => state.gettingZones.value
                                  ? const MyIndicator()
                                  : ZoneSelectorM())
                              : Container();
                        },
                      ),
                      SizedBox(height: 20.h),
                      Obx(
                        () {
                          return state.createAdsState.value
                              ? const CircularProgressIndicator()
                              : ElevatedButton(
                                  onPressed: () {
                                    logic.createAD();
                                  },
                                  style: ElevatedButton.styleFrom(
                                    primary: Get.theme.primaryColor,
                                    fixedSize: Size(Get.width/1.5, 80.h),
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(8.sp),
                                    ),
                                  ),
                                  child: Text(
                                    'Create AD'.tr,
                                    style: Get.textTheme.bodyText1!.copyWith(
                                      color: Colors.white,
                                      fontSize: 35.sp,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                );
                        },
                      ),
                    ],
                  ),
                )
              ],
            ),
          ),
        ),
      ),
    );
  }
}
