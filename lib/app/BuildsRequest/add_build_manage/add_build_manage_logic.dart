/// Generated by Flutter GetX Starter on 2022-10-18 23:47
import 'dart:io';

import 'package:ejarkom/app/Ads/models/GetBuildTypeModel.dart';
import 'package:ejarkom/app/Ads/models/GetCityModel.dart';
import 'package:ejarkom/app/Ads/models/Zone.dart';
import 'package:ejarkom/app/BuildsRequest/models/manage_req_model.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';

import 'add_build_manage_state.dart';

class AddBuildManageLogic extends GetxController {
  final state = AddBuildManageState();

  // void changeSelectedCostType(String newValue) {
  //   state.selectedCostType = newValue;
  //   update(['c']);
  // }

  void changeSelectedCity(City newValue) {
    state.selectedCity = newValue;
    update(['ci']);
    getZones(state.selectedCity!.id!.toString());
  }

  void changeSelectedZone(Zone newValue) {
    state.selectedZone = newValue;
    update(['z']);
  }

  void changeSelectedType(TypeBuild newValue) {
    state.selectedBuildType = newValue;
    update(['b']);
  }

  void changeGettingCities() =>
      state.gettingCities.value = !state.gettingCities.value;

  void changeGettingZones() =>
      state.gettingZones.value = !state.gettingZones.value;

  void changeGettingBuilds() =>
      state.gettingBuildTypes.value = !state.gettingBuildTypes.value;

  void changeCreateState() =>
      state.createAdsState.value = !state.createAdsState.value;

  void getCities() async {
    changeGettingCities();
    var result = await state.createAdHttp.getAllCities();
    result.fold(
      (l) {
        state.cities = [];
        update(['ci']);
        Get.snackbar('Error'.tr, 'please check your internet connection'.tr);
      },
      (r) {
        state.cities = r.cities!;
        print(state.cities.length);

        update(['ci']);
      },
    );
    changeGettingCities();
  }

  void getBuildTypes() async {
    changeGettingBuilds();
    var result = await state.createAdHttp.getAllBuildTypes();
    result.fold(
      (l) {
        state.cities = [];
        update(['b']);
        Get.snackbar('Error'.tr, 'please check your internet connection'.tr);
      },
      (r) {
        state.typeBuilds = r.typeBuild!;
        print(state.cities.length);

        update(['b']);
      },
    );
    changeGettingBuilds();
  }

  void getZones(String id) async {
    changeGettingZones();
    update(['z']);
    var result = await state.createAdHttp.getAllZones(id: id);
    result.fold(
      (l) {
        state.zones = [];
        update(['z']);
        Get.snackbar('Error'.tr, 'please check your internet connection'.tr);
      },
      (r) {
        if (r.zones!.isNotEmpty) {
          state.zones = r.zones!;
          print(state.zones.length);
          // state.selectedZone = state.zones.first;
          update(['z']);
        } else {
          state.zones = r.zones!;
          print(state.zones.length);
          // state.selectedZone=state.zones.first;
          update(['z']);
        }
      },
    );
    changeGettingZones();
  }

  void getImages() async {
    FilePickerResult? result =
        await FilePicker.platform.pickFiles(allowMultiple: true);

    if (result != null) {
      List<File> files = result.paths.map((path) => File(path!)).toList();
      for (int i = 0; i < files.length; i++) {
        if (state.images.length < 5) {
          state.images.add(files[i]);
          state.photos.add(files[i].readAsBytesSync());
        } else {}
      }
      update(['photo']);
    } else {
      // User canceled the picker
    }
  }

  void deleteImage(int index) {
    state.images.removeAt(index);
    state.photos.removeAt(index);
    update(['photo']);
  }

  collectData() {
    if (state.formKey.currentState!.validate()) {
      if (state.images.isNotEmpty &&
          state.selectedZone != null &&
          state.selectedCity != null &&
          state.selectedBuildType != null) {
        return ManageRequestModel(
          nameA: state.nameE.text,
          video: state.video.text,
          descE: state.descriptionE.text,
          cost: state.cost.text,
          phone: state.phone.text,
          addressE: state.addressE.text,
          zoneId: state.selectedZone!.id!.toString(),
          typeBuild: state.selectedBuildType!.id!.toString(),
          photos: List.generate(
            state.images.length,
            (index) => state.images[index].path,
          ),
        );
      } else {
        return '';
      }
    } else {
      return '';
    }
  }

  void createAD() async {
    print(state.nameE.text);
    print(collectData().toString());
    if (collectData() is ManageRequestModel) {
      changeCreateState();
      var result = await state.createAdHttp.createManagementRequest(
        createAdModel: collectData(),
        photos: state.photos,
      );
      result.fold(
            (l) {
          print(l);

          Get.snackbar('Error'.tr, l.toString());
        },
            (r) {
              Get.back();

              Get.snackbar(
                'Done'.tr,
                'This Request has been Sent'.tr,
                duration: const Duration(seconds: 5),
                icon: Icon(
                  Icons.check,
                  color: Colors.green,
                  size: 45.sp,
                ),
              );
        },
      );
      changeCreateState();
    }
  }

  @override
  void onInit() {
    // TODO: implement onInit
    super.onInit();
    getBuildTypes();
    getCities();
  }

  @override
  void onReady() {
    // TODO: implement onReady
    super.onReady();
  }

  @override
  void onClose() {
    // TODO: implement onClose
    super.onClose();
  }
}
