/// Generated by Flutter GetX Starter on 2022-10-14 00:05
import 'dart:io';

import 'package:ejarkom/app/build/widgets/rend_indicator.dart';
import 'package:ejarkom/app/complete_data/error_dialog.dart';
import 'package:ejarkom/utils/method.dart';
import 'package:file_picker/file_picker.dart';
import 'package:get/get.dart';

import 'complete_data_state.dart';

class CompleteDataLogic extends GetxController {
  final state = CompleteDataState();

  @override
  void onInit() {
    // TODO: implement onInit
    super.onInit();
  }

  @override
  void onReady() {
    // TODO: implement onReady
    super.onReady();
  }

  @override
  void onClose() {
    // TODO: implement onClose
    super.onClose();
  }

  void getImages({required String w}) async {
    FilePickerResult? result =
        await FilePicker.platform.pickFiles(allowMultiple: false);

    if (result != null) {
      List<File> files = result.paths.map((path) => File(path!)).toList();

      if (w == 's') {
        state.signatureImage = files.first;
        state.signaturePhoto = files.first.readAsBytesSync();
        update(['Sphoto']);
      } else {
        state.image = files.first;
        state.photo = files.first.readAsBytesSync();
        update(['photo']);
      }
    } else {
      // User canceled the picker
    }
  }

  checkData() {
    List<String> error = [];
    if (state.address.text.isEmpty) {
      error.add('please complete address.'.tr);
    }
    if (state.dob.text.isEmpty) {
      error.add('please complete Date Of Birth.'.tr);
    }
    if (state.photo == null) {
      error.add('please complete ID photo.'.tr);
    }
    if (state.signaturePhoto == null) {
      error.add('please complete Signature photo.'.tr);
    }
    return error;
  }

  void addMethod() async {
    List<String> check = checkData();
    if (check.isNotEmpty) {
      Get.dialog(ErrorD(error: check));
    } else {
      Get.dialog(CircularDialog(), barrierDismissible: false);
      var result = await state.rentHttp.addInfo(
        address: state.address.text,
        dob: state.dob.text,
        idPhoto: state.photo,
        sigPhoto: state.signaturePhoto,
      );
      result.fold(
        (l) {
          Get.back();
          // Get.snackbar('Error'.tr, l);
          mySnackBar(title: 'Error'.tr,body: l);
        },
        (r) {
          Get.back();
          Get.back();
          // Get.snackbar('Done'.tr, 'You info has been added'.tr);
          mySnackBar(title: 'Done'.tr,body: 'You info has been added'.tr);
        },
      );
    }
  }

  void deleteImage({required String w}) {
    if (w == 's') {
      state.signaturePhoto = null;
      state.signatureImage = null;
      update(['Sphoto']);
    } else {
      state.image = null;
      state.photo = null;
      update(['photo']);
    }
  }
}
