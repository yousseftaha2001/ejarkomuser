/// Generated by Flutter GetX Starter on 2022-10-17 03:08
import 'package:ejarkom/app/Ads/models/MyAdsRequestsModel.dart';
import 'package:ejarkom/utils/apis.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';

import 'ads_requests_state.dart';

class AdsRequestsLogic extends GetxController {
  final state = AdsRequestsState();
  String? id;

  AdsRequestsLogic({required this.id});

  void changePageState() =>
      state.gettingState.value = !state.gettingState.value;

  void changeCheckMethodState() =>
      state.checkMethodState.value = !state.checkMethodState.value;

  void changeActionState() =>
      state.actionState.value = !state.actionState.value;

  void getPage() async {
    changePageState();
    var result = await state.createAdHttp.getRequests(id: id!);
    result.fold((l) => pageError(l), (r) => pageDone(r));
    changePageState();
  }

  void pageDone(MyAdsRequestsModel myAdsRequestsModel) {
    state.requests = myAdsRequestsModel.reqest!;
  }

  void pageError(String e) {
    Get.snackbar('Error'.tr, e.toString());
  }

  void actionDialog({required String type}) async {
    changeActionState();

    if (type == 'reject') {
      var result = await state.createAdHttp
          .actionOnRequest(id: id!, api: rejectRequestAPI);
      result.fold(
        (l) {
          changeActionState();
          Get.back();
          Get.snackbar(
            'Error'.tr,
            l,
            duration: const Duration(seconds: 5),
            icon: Icon(
              Icons.close,
              color: Colors.red,
              size: 45.sp,
            ),
          );
        },
        (r) {
          changeActionState();
          Get.back();
          Get.snackbar(
            'Error'.tr,
            'This Request has been rejected'.tr,
            duration: const Duration(seconds: 5),
            icon: Icon(
              Icons.check,
              color: Colors.green,
              size: 45.sp,
            ),
          );
        },
      );
    } else {
      var result = await state.createAdHttp
          .actionOnRequest(id: id!, api: acceptRequestAPI);
      result.fold(
        (l) {
          changeActionState();
          Get.back();
          Get.snackbar(
            'Error'.tr,
            l,
            duration: const Duration(seconds: 5),
            icon: Icon(
              Icons.close,
              color: Colors.red,
              size: 45.sp,
            ),
          );
        },
        (r) {
          changeCheckMethodState();
          Get.back();
          Get.snackbar(
            'Done'.tr,
            'This Request has been Approved'.tr,
            duration: const Duration(seconds: 5),
            icon: Icon(
              Icons.check,
              color: Colors.green,
              size: 45.sp,
            ),
          );
        },
      );
    }
  }

  void checkMethod({required String userId}) async {
    changeCheckMethodState();
    var result = await state.createAdHttp.checkRequest(userId: userId);
    result.fold(
      (l) {
        changeCheckMethodState();
        Get.back();
        Get.snackbar(
          'Error'.tr,
          l,
          duration: const Duration(seconds: 5),
          icon: Icon(
            Icons.close,
            color: Colors.red,
            size: 45.sp,
          ),
        );
      },
      (r) {
        changeCheckMethodState();
        Get.back();
        Get.snackbar(
          'Done'.tr,
          'Check Request has been Sent'.tr,
          duration: const Duration(seconds: 5),
          icon: Icon(
            Icons.check,
            color: Colors.green,
            size: 45.sp,
          ),
        );
      },
    );
  }

  @override
  void onInit() {
    // TODO: implement onInit
    super.onInit();
    getPage();
  }

  @override
  void onReady() {
    // TODO: implement onReady
    super.onReady();
  }

  @override
  void onClose() {
    // TODO: implement onClose
    super.onClose();
  }
}
